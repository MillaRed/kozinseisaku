#include "Enemy.h"
#include"AnimData.h" 
#include"Field.h"
#include"Slash.h"

Enemy::Enemy(const CVector2D& p, bool flip):Base(eType_Enemy){
		//画像複製
		m_img = COPY_RESOURCE("Enemy", CImage);
		//再生アニメーション設定
		m_img.ChangeAnimation(0);
		//座標設定
		m_pos = p;
		//中心位置設定
		m_img.SetCenter(128, 224);
		//当たり判定用矩形設定
		m_rect = CRect(-32, -128, 32, 0);
		//反転フラグ
		m_flip = flip;
}

void Enemy::StateIdle(){
	//移動量
	const float move_speed = 6;
	//移動フラグ
	bool move_flag = false;
	//ジャンプ力
	const float jump_pow = 12;
	//プレイヤーを探索
	Base* player = Base::FindObject(eType_Player);
	
	/*動作確認後コメント化
	//左移動
	if(player->m_pos.x<m_pos.x-64){
		//移動量を設定
		m_pos.x += -move_speed;
		//反転フラグ
		m_flip = true;
		move_flag = true;
	}
	//右移動
	if (player->m_pos.x > m_pos.x + 64) {
		//移動量を設定
		m_pos.x += move_speed;
		//反転フラグ
		m_flip = false;
		move_flag = true;
	}
	*/
	if (move_flag) {
		//走るアニメーション
		m_img.ChangeAnimation(eAnimRun);
	}
	else {
		//待機アニメーション
		m_img.ChangeAnimation(eAnimIdle);
	}

}
void Enemy::StateAttck(){

}
void Enemy::StateDamage(){

}
void Enemy::StateDown(){

}

void Enemy::Update(){
	switch (m_state) {
		//
	case eState_Idle:
		StateIdle();
		break;
	}
	
	//	重力による落下
	m_vec.y += GRAVITY;
	m_pos += m_vec;
	//アニメーション更新
	m_img.UpdateAnimation();
}

void Enemy::Draw(){
	//位置設定
	m_img.SetPos(GetScreenPos(m_pos));
	//反転設定
	m_img.SetFlipH(m_flip);
	//描画
	m_img.Draw();
	//当たり判定用の矩形の表示
	DrawRect();
}

void Enemy::Collision(Base*b){
	switch (b->m_type) {
	case eType_Player_Attack:
		//
		if (Slash* s = dynamic_cast<Slash*>(b)) {
			if (m_damage_no != s->GetAttackNo() && Base::CollisionRect(this, s)) {
				//
				m_damage_no = s ->GetAttackNo();
				m_hp -= 50;
				if (m_hp <= 0) {
					m_state = eState_Down;
				}
				else {
					m_state = eState_Damage;
				}
			}
		}
		break;
	case eType_Field:
		//Field型へキャスト、型変換できたら
		if (Field* f = dynamic_cast<Field*>(b)) {
			//地面より下にいったら
			if (m_pos.y > f->GetGroundY()) {
				//地面の高さに戻す
				m_pos.y = f->GetGroundY();
				//落下速度リセット
				m_vec.y = 0;
				//接地フラグON
				m_is_ground = true;
			}
		}
		break;
	}

}

